require('dotenv-flow').config();
const { departments } = require('./data/departments');

module.exports = {
    env: {
        NODE_ENV: process.env.NODE_ENV,
        JWT_SECRET: process.env.JWT_SECRET,
        DB_NAME: process.env.DB_NAME,
        DB_URL: process.env.DB_URL,
        Logs: process.env.Logs,
        S3_accessKeyId: process.env.ACCESS_ID,
        S3_secretAccessKey: process.env.ACCESS_KEY,
        S3_BucketName: process.env.BUCKET_NAME,
        S3_RegionName: process.env.REGION_NAME,
        OPENAI_KEY: process.env.OPEN_AI_API_KEY,
        S3_OBJECT_URL: process.env.BUCKET_OBJECT_URL,
        translateProjectId: process.env.AI_PROJECTID,
        translateKey: process.env.AI_TRANSLATE_KEY,
        GoogleKey: process.env.GOOGLE_AUTH_KEY,
        Interakt_Url: process.env.INTERAKT_URL,
        Interakt_Auth_Key: process.env.INTERAKT_AUTH_KEY,
        Interakt_New_Auth_Key:process.env.Interakt_New_Auth_Key,
        queue_user: process.env.QUEUE_USER ,
        queue_password:process.env.QUEUE_PASSWORD,
        queue_host:process.env.QUEUE_HOST,
        queue_port:process.env.QUEUE_PORT,
        queue_exchange: process.env.QUEUE_EXCHANGE,
        queue_name: process.env.QUEUE_NAME,
        queue_routingKey: process.env.QUEUE_ROUTINGKEY,

    },
    templates:{
      thankyou_share_location:"thankyou_share_location_de",
      order_confirmation:"order_confirmation",
      best_candidate_match:"provider_3",
      best_job_match:"message_3",
      best_match_candidate_initial_message:"employer_message_2",
      best_job_match_initial_message:"message_1",
      process_request:"process"
    },
    newtemplates:{
      thankyou_share_location:"thankyou_share_location",
      order_confirmation:"order_confirmation",
      best_candidate_match:"provider_3",
      best_job_match:"message_3",
      best_match_candidate_initial_message:"employer_message_2",
      best_job_match_initial_message:"message_1",
      process_request:"process"
    },
    statuses: [true, false],
    validCustomerTypes: ["Shop", "Individual", "FPO", "Farmer", "Others"],
    YesOrNoValues: ["Yes", "No"],
    role: ["Admin", "Client","Staff"],
    gender: ["Male", "Female", "Others", ""],
    modules: ["Jobs", "Finance", "CustomerCare", "General","Departments", "uploadInventory","Ecommerce", "Ondc","Customers", "Inventory", "Hesaathi", "Staff", "PublicGrievance","RealEstate","Enrollment", "Dashboard", "Messages"],
    locationType: ['Point'],
    realEstateHolders:["Buyer","Seller","Tenant","Landlord"],
    transcribedStatus: ['Pending', 'Transcribing', 'Processed'],
    transcribedViews: ['English', 'Hindi'],
    endcFileTypes:["image","audio"],
    prompt_for_jobs: `You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:,
    Name ( valid names in the conversation in English in string separated by comma),
    category (Maid/Electrician/Plumber,Carpenter etc. category of worker defined),
    jobType (Full time/Part Time include if present),
    instruction(instruction or rule to be followed),
    personType(Candidate,Employer,Others with respect to job or vacancy,if any vacancy or job is being offered it belong to Employer,if a person or someone is looking for new job or a new change it belongs to Candidate,rest belongs to Others(always return one option in this category)),
    Message(translate in English),
    skills(identify the necessary skills described in transcription,return in form of array),
    address(display only if reported - outlet or shop address in case of business opportunity nature translate in English),
    content(include the names of speakers in the transcripted text in their language followed by a line break).
    All the lines should be included and return the result as a JSON object."
    In the transcrpted text, always provide the speaker's names along with what they said in its language, followed by a line break \n`,
    prompt: `You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text. Set the name of speakers strictly in transcription and  names of speakers in the transcripted text in their language followed by a line break.Return the output in JSON format`,
    dev_system_prompt: `You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    Nature (Complaint, Appreciation, Sales Request, Business Opportunity, Partnership, Others),
    Name ( valid names in the conversation in English in string separated by comma),
    Type of Product (mention the type of product only if it's provided in the message - Cheese, Butter, Milk, Kheer, Lassi, Current Account, Savings Account, Credit Card, Debit Card, Loan etc),
    Quantity (display only if it's available translate in English),
    Type (mention Complaint type only if nature = complaint - Product Quality, Price, Packaging, Worker Behaviour, Others),
    Complaint (display only if the nature is a complaint translate in English),
    Message derived (translate in English),
    Address mentioned (display only if reported - outlet or shop address in case of business opportunity nature translate in English),
    Concerned Department (Product, Packaging, Pricing, Marketing, Business Development, Human Relations, etc.),
    Transcripted Text (include the names of speakers in the transcripted text in their language followed by a line break).
    
    All the lines should be included and return the result as a JSON object.`,
    matchcatalog_prompt: `You are a helpful assistant for the company Wonder Words. Your task is to  match the user input items with the following catalog list <<<cataloglist>>>.provide the list of items with quantity(strictly in form of numbers) ,units(like kg for kilo,pieces,packets), and use only the context provided. provide the output in json format in english as
    {items: [{itemName:'', inputItem:'', quantity: (return strictly in form of number only), units:'units of item,convert in english if present',available: true}]}.
    DONOT include anything(text) other than json items. In JSON itemName is the item in catalog, it will be blank if not present in catalog and inputItem is user input item. Match each inputItem only once. Don't show whole catalog list in output`,
    prompt_for_grievance: `You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    Query Type (Complaint, Appreciation, Help, Feedback, Others),
    Name ( valid names in the conversation in English in string separated by comma),
    Concerned Department (valid department that relates to in ${departments}),
    Query Summary(what is summary of query above),
    Query ask (what exactly is required to solve the query),
    Category (show only color code name, like Red for Emergency, Orange for Complaint , Green for others),
    Location (location in transcription translate in English),
    Transcripted Text (include the names of speakers in the transcripted text and strictly in the language of transcription followed by a line break).    
    All the lines should be included and return the result as a JSON object.`,
    GET_MODULE_PROMPT: `You are a helpful assistant for the company Wonder Words. Your task is to categorise the text based on user input. If the user input contains a list of grocery items with quantity, then it's 'Ecommerce'. If the user input contains anything that relates to some voting parties or relates to joining of some voting party then it is 'Enrollment'.If the user input contains the word "GOLD" or a query about a loan, complaint, or feedback on a product or service,or if it mentions about adhaar number or adhaar card related info then it's 'CustomerCare'. If the user input is related to job or work, then the category is 'Jobs'. If the user input includes terms related to real estate, such as property details, deals, or transactions, then the category is 'RealEstate'. If the user input is none of the previous ones, then the category is 'General'. The categories can be one of ('Ecommerce', 'Jobs', 'CustomerCare', 'RealEstate', 'General'). Just return one of the given categories, DO NOT include any other text.`,
    hesaathitype: ["Shop", "Individual", "FPO", "Farmer", "Others"],
    validItemUnits: ["kg", "g", "l", "ml", "m", "cm", "pieces"],
    paymentStatus: ["Paid", "Partially Paid", "Pending"],
    orderStatus: ["Due", "Accepted", "Shipped", "Delivered", "Rejected"],
    audioNormalDuration:35,
    weekDays: [
      { day: 0, dayName: "Sunday" },
      { day: 1, dayName: "Monday" },
      { day: 2, dayName: "Tuesday" },
      { day: 3, dayName: "Wednesday" },
      { day: 4, dayName: "Thursday" },
      { day: 5, dayName: "Friday" },
      { day: 6, dayName: "Saturday" }
    ],
    categories:["Complaint", "Feedback", "Partnerships", "Others"],
    segmentDuration:20,
    status:["In-Progress", "Resolved", "Rejected", "Cancelled","Due"],
    availableLanguages:["en","hi","ta","te","kn","ml","pa"],
    QueryStatus: ["Processed", "Resolved", "Rejected", "Cancelled"],
    validGSTTreatmentTypes:["Registered - Regular GST","Registered - Comp. Scheme"],
    PersonTypes: ["Employer", "Candidate", "Others"],
    prompt_for_candidates_match: `Given a set of candidates with their skills, location, and category information, calculate the matching score for each candidate based on the following criteria:
                            -Matching Score: Location (exact match) + Category + Skills = 10-
                            Matching Score: Location (not exact match) + Category + Skills = 8- 
                            Matching Score: Location + Category = 6- 
                            Matching Score: Location (not exact match) + Category = 5-
                            Matching Score: If Category is missing = 0.
                            Please provide the necessary input data for skills, location, and category,
                            and return provide the output only(no explanation) in JSON object strictly  as [{candidateName:'',matchingscore:(return in number),candidateId:candidate.candidateId}].`,
    prompt_for_customer_care:`You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    Nature (Complaint, Feedback, Partnerships, Others),
    Name ( valid names in the conversation in English in string separated by comma),
    Type of Product (mention the type of product only if it's provided in the message - Cheese, Butter, Milk, Kheer, Lassi, Current Account, Savings Account, Credit Card, Debit Card, Loan etc),
    Quantity (display only if it's available translate in English),
    Type (mention Complaint type only if nature = complaint - Product Quality, Price, Packaging, Worker Behaviour, Others),
    Complaint (display only if the nature is a complaint translate in English),
    Message derived (translate in English),
    Address mentioned (display only if reported - outlet or shop address in case of business opportunity nature translate in English),
    Concerned Department ( provide a list of departments names exactly matching from departments array provided strictly relating to content  mentioned in the transcription(format should be in string only).,
    Transcripted Text (provide the full transcription.).
    
    All the lines should be included and return the result as a JSON object."
    
    In the transcripted text, always provide the speaker's names along with what they said in its language, followed by a line break \n`,
    prompt_for_jobs_match:`Given a set of jobs with their skills, location, and category information, calculate the matching score for each job based on the following criteria:
    -Matching Score: Location (exact match) + Category + Skills = 10-
    Matching Score: Location (not exact match) + Category + Skills = 8- 
    Matching Score: Location + Category = 6- 
    Matching Score: Location (not exact match) + Category = 5-
    Matching Score: If Category is missing = 0.
    Please provide the necessary input data for skills, location, and category,
    and return provide the output only(no explanation) in JSON object strictly  as [{jobName:'',matchingscore:(return in number),jobId:job.jobId}].`,
    prompt_for_real_estate:`You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    Name (valid names in the conversation in English in a string separated by a comma),
    Message derived (translate in English),
    Address mentioned (display only if reported - location where property is situated translate in English),
    Category (In this modified prompt, categorize the property based on deal types. If the deal type is residential, categorize it as either "Residential-Apartment," "Residential-House/villa," or "Residential-Land." If the deal type is commercial, categorize it as either "Commercial-Retail" or "Commercial-Office."),
    Transcripted Text (provide the full transcription.),
    Price (provide the price described using Indian numbering system, for example, "Rs. 2.5 crores" or "Rs. 19 lakhs").
    Area (mention the area of the property, specifying the unit used, e.g., "1200 sq. ft." or "3 acres").,
    estateHolders(return the holders in transcripton related to ["Buyer","Seller","Tenant","Landlord"] )
    
    All the lines should be included, and return the result as a JSON object."
    
    In the transcripted text, always provide the speaker's names along with what they said in its language, followed by a line break \n`,
    prompt_for_enrollment:`You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    Name(Finding the name of person is speaking in transcription),
    age(Age of speaker in transcription),
    address(Referring to any location of speaker)
    referredPerson(referring the name or phone number of person speaker is referring),
    phoneNo(phone number related to speaker),
    hasAdhaar(return Yes if speaker has adhaar card else No),
    adhaarNumber(adhaar number of speaker if any),
    constituency(constituency of speaker in transcription if any),
    All the lines should be included, and return the result as a JSON object`,
    prompt_for_ondc_long_description:`You are a helpful assistant.Give me a creative and meaningful description about the product mentioned in 100 words from the above transcription`,
    prompt_for_ondc_short_description:`You are a helpful assistant.Give me a creative and meaningful description about the product mentioned in 50 words from the above transcription`,
    prompt_for_ondc:`You are a helpful assistant.Your task is to find the fields that are related to following transcription(that are mentioned in transcription) :
     itemName:(name of item that is being talked about else return null ),
     manufacturerName:(return the manufacterer name  in form of array else return null) ,
     manufacturerAddress:(return the manufacterer address in form of array  else return null)    ,   
     commonNameofCommodity:(return the common name of commodity in form of array  else return null ), 
     manufacturedate:(return the result in date format  else return null ),
     importedCountry:(return the country from which product is imported in form of array else return null),
     isVegetarian: true/false(if product is veg or non-veg) ,
     Weight(identified weight in transcription of item,always return in form of number),
     TimetoShip(estimated time to ship the item,always return in form of string),
     MaxSaleQuantity(maximum quantity of item needs to be sold,always return in form of number),
     MinSaleQuantity(minimum quantity of item needs to be sold,always return in form of number),
     purchasePrice(purchase price of item,always return in form of number),
     pricepergram(price per gram of item,always return in form of number),
     packSize(total size of packet,always return in form of number ),
     marketedAddress(identified marketed address of the item,always return in form of array),
     marketedBy(identified marketers of commodity,always return in form of array),
     complaintorfeedback(any feedback or complaint related to commodity or any way to complaint or feedback),
     UnitValue(total unit value of item,always return in form of string ),
     countryOfOrigin(country from which commodity is originated,always return in form of array),
     maxRetailPrice(maximum retail price of item,always return in form of number),
     category(return the _id of category to which item belong in the provided categories,always return in form of string),
     subCategory(return the _id of subcategory to which item belong in the provided subcategories,always return in form of string),
     brandName(return the brand name of commodity,always return in form of array),
     EANCode(return any EAN Code if mentioned of commodity,always return in form of string),
     salePrice(return the sale price of commodity if present,always return in form of number),
     ingredients: (return in form of array separated by comma  else return null),
     nutritionalInfo: (return in form of array of objects like [{name:(name of nutrition),value:(its value mentioned)}]  else return null),
     brandOwnerName: (return the owner of brand in form of array else return null),
     brandOwnerAddress:(return the brand owner address in form of array else return null), 
     brandOwnerFSSAILicenseNo: (return the brand owner FSSAI License No in form of array else return null),
     otherFSSAILicenseNo: (return the other FSSAI License No in form of array  else return null),
     importerName: (return the importer name  in form of array else return null),
     importerAddress: (return the importer address in form of array else return null ),
     importerFSSAILicenseNo: (return the importer FSSAI License No in form of array else return null),
     importedCountryofOrigin: (return the imported country of origin in form of array else return null),
     otherImporterName: (return the other importer name in form of array else return null ),
     otherImporterAddress: (return the other importer address in form of array else return null),
     otherPremises: (return the other premises of importer in form of array else return null ),
     otherImporterCountryofOrigin: (return the other importer country of origin in form of array else return null ),
     Price:(return the price of product mentioned in number only  else return null),
     IsSellingPriceExclusiveofGST: (return true/false if selling price of product is exclusive of GST  else return null),
     MaxRetailPrice:(return the maximum retail price of product in number only else return null),
     SellingPrice:(return the selling price of product in number only else return null),
     SGSTTaxRate:(return the rate of SGSTTax in number only  else return null),
     CGSTTaxRate: (return the rate of CGSTTax in number only  else return null),
     IGSTTaxRate: (return the rate of IGSTTax in number only  else return null),
     TotalTaxRate: (return the total Tax Rate in number only  else return null),
     UnitDenomination:(returning the denomination of product it should be like kgs,grams like this else return null ),
     UnitValue:(return the unit value of product in number only  else return null  ),
     Quantity: (return the quantity of product mentioned in number only else return null),
     Returnable: (return true/false if product is returnable or not else return null),
     ReturnWindow : (return the time period in which product is to be returned else return null),
     SellerPickupReturn: (return true/false if seller pickup return is specified else return null),
     Cancellable: (return true/false if product is cancellable else return null),
     CODAvailability: (return true/false if product is on cod else return null ),
     TimetoShip (in Days):(return the number of days taken to be delivered the product else return null),
     MaxSaleQuantity: (return the maximum sale qunatity of product in number only  else return null),
     MinSaleQuantity: (return the minimum sale qunatity of product in number only else return null ),
     All the lines should be included(and donot any other line or fields strictly apart from these in object), and return the result as a JSON object strictly with no explanation.
     `,
     prompt_for_ondchack:`You are a helpful assistant.Your task is to find the fields that are related to following transcription(that are mentioned in transcription) :
     name:(name of item that is being talked about else return null ),
     commonNameofCommodity:(return the common name of commodity in form of array  else return null ), 
     category(return the _id of category to which item belong in the provided categories,always return in form of string),
     subCategory(return the _id of subcategory to which item belong in the provided subcategories,always return in form of string),
     salePrice(return the sale price of commodity if present,always return in form of number),
     Price:(return the price of product mentioned in number only  else return null),
     UnitDenomination:(returning the denomination of product it should be like kgs,grams like this else return null ),
     UnitValue:(return the unit value of product in number only  else return null  ),
     Quantity: (return the quantity of product mentioned in number only else return null),
     description: meaningful description about the product mentioned in 50 words from the above transcription,
     All the lines should be included(and donot any other line or fields strictly apart from these in object), and return the result as a JSON object strictly with no explanation.
     `,
     ONDCProductCategories:[
      "Fruits and Vegetables",
      "Masala & Seasoning",
      "Oil & Ghee",
      "Gourmet & World Foods",
      "Foodgrains",
      "Eggs, Meat & Fish",
      "Cleaning & Household",
      "Beverages",
      "Beauty & Hygiene",
      "Bakery, Cakes & Dairy",
      "Kitchen Accessories",
      "Baby Care",
      "Stationery",
      "Snacks & Branded Foods",
      "Pet Care"
    ],
    ONDCProductSubCategories:[
     "Atta, Flours & Sooji",
     "Dals & Pulses",
     "Edible Oils & Ghee",
     "Masalas & Spices",
     "Organic Staples",
     "Rice & Rice Products",
     "Salt, Sugar & Jaggery",
     "Coffee",
     "Energy & Soft Drinks",
     "Fruit Juices & Drinks",
     "Tea",
     "Biscuits & Cookies",
     "Chocolate & Candies",
     "Frozen Veggies & Snacks",
     "All Purpose Cleaners",
     "Car & Shoe Care",
     "Detergents & Dishwash",
     "Disposables, Garbage Bag",
     "Freshners & Repellents",
     "Mops, Brushes & Scrubs",
     "Pooja Needs",
     "Stationery",
     "Baby Accessories",
     "Baby Bath & Hygiene",
     "Baby Food & Formula",
     "Diapers & Wipes",
     "Feeding & Nursing",
     "Mothers & Maternity",
     "Bath & Hand Wash",
     "Feminine Hygiene",
     "Fragrances & Deos",
     "Hair Care",
     "Health & Medicine",
     "Makeup",
     "Men's Grooming",
     "Oral Care",
     "Skin Care",
     "Bakery Snacks, Cookies, Rusk",
     "Breads & Buns",
     "Cakes & Pasteries",
     "Dairy",
     "Ice Creams & Deserts",
     "Miscellaneous ",
    ],

    prompt_for_adhaar_card:`You are a helpful assistant. Your task is to format and correct the sentences of the transcribed text and provide the following structure in English:
    name(Finding the name of person mentioned in transcription),
    aadhar(Referring to user adhaar card number)
    address(referring to the person's address mentioned in transcription),
    All the lines should be included, and return the result as a JSON object`,
  }
